	  MODULE STATEMODULE
	  INTEGER NUMEL,NINTP,DNMIN
	  REAL DMGINIT,DDMGINC,DDOTMAX
	  REAL, ALLOCATABLE :: DDOTARR(:,:) 
	  INTEGER, ALLOCATABLE :: KITER(:),PCYC(:),CJUMP(:)
	  !DIMENSION DDOTARR(37524), KITER(37524)
	  !COMMON /STATEINFO/ DDOTARR, PCYC, CJUMP, DDOTMAX
	  SAVE
	  END


      SUBROUTINE UEXTERNALDB(LOP,LRESTART,TIME,DTIME,KSTEP,KINC)
	  USE STATEMODULE
      INCLUDE 'ABA_PARAM.INC'
      DIMENSION TIME(2)
	  IF (LOP.EQ.0) THEN
	    !NUMEL = 140
		NUMEL = 37524
		NINTP = 27
		DMGINIT = 1E-2
		DDMGINC = 1E-2
		ALLOCATE(DDOTARR(NUMEL,NINTP),KITER(NUMEL))
	    ALLOCATE(PCYC(NUMEL),CJUMP(NUMEL))
		!WRITE(6,*) 'DDOTARR', SIZE(DDOTARR), 'KINTER', SIZE(KITER)
		DDOTMAX = 0
		DO I = 1,NUMEL
		  KITER(I) = 0
		  PCYC(I) = 0
		  CJUMP(I) = 0
		  DO J = 1,NINTP
		    DDOTARR(I,J) = 0
		  ENDDO
		ENDDO
	  ENDIF
	  
	  IF (LOP.EQ.2) THEN
	    DDOTMAX = 0
	    DO I = 1,NUMEL
	      IF ((TIME(1)-PCYC(I)).EQ.1) THEN
		    PCYC(I) = PCYC(I)+1
		    CJUMP(I) = 1
		    DO J = 1,NINTP
		      IF (DDOTARR(I,J).GT.DDOTMAX) THEN
			    DDOTMAX = DDOTARR(I,J)
			  ENDIF
			ENDDO
		  ELSE
		    CJUMP(I) = 0
		  ENDIF
		  WRITE(6,*) KSTEP, KINC, LOP, I, PCYC(I), CJUMP(I), DDOTMAX
		ENDDO
		DNMIN = DDMGINC/DDOTMAX
	  ENDIF
	  
	  IF (LOP.EQ.3) THEN
	    DEALLOCATE(DDOTARR,KITER,PCYC,CJUMP)
	  ENDIF
	  
      RETURN
      END
	  
	  
      SUBROUTINE UMAT(STRESS,STATEV,DDSDDE,SSE,SPD,SCD,RPL,DDSDDT,
     1 DRPLDE,DRPLDT,STRAN,DSTRAN,TIME,DTIME,TEMP,DTEMP,PREDEF,DPRED,
     2 CMNAME,NDI,NSHR,NTENS,NSTATV,PROPS,NPROPS,COORDS,DROT,PNEWDT,
     3 CELENT,DFGRD0,DFGRD1,NOEL,NPT,LAYER,KSPT,JSTEP,KINC)
      USE STATEMODULE
      INCLUDE 'ABA_PARAM.INC'
      CHARACTER*80 CMNAME
      DIMENSION STRESS(NTENS), STATEV(NSTATV), DDSDDE(NTENS,NTENS), 
     1 DDSDDT(NTENS), DRPLDE(NTENS), STRAN(NTENS), DSTRAN(NTENS), 
     2 TIME(2), PREDEF(1), DPRED(1), PROPS(NPROPS), COORDS(3), 
     3 DROT(3,3), DFGRD0(3,3), DFGRD1(3,3), JSTEP(4)

      REAL E, NU, SU, SL0, BETA, M0, B1, B2, A, TOL, DMG, EDMG, NCYC, 
     1 SH_MAX, SH_MIN, SEQ_MAX, NF, I1, I2, J2, SEQ, SH, SH_MEAN, 
     2 DEV_AMP, AII, AII_STAR, MACAULAY, ALPHA, DDOT, DN, DDMG, 
     3 DEV_MAX(NTENS), DEV_MIN(NTENS), DEV(NTENS)

      E = PROPS(1)
      NU = PROPS(2)
      SU = PROPS(3)
      SL0 = PROPS(4)
      BETA = PROPS(5)
      M0 = PROPS(6)
      B1 = PROPS(7)
      B2 = PROPS(8)
      A = PROPS(9)
      TOL = PROPS(10)
      NF = 1.0E5
	  
	  DMG = STATEV(1)
	  EDMG = STATEV(2)
	  NCYC = STATEV(3)
	  SEQ_MAX = STATEV(4)
      SH_MAX = STATEV(5)
      SH_MIN = STATEV(6)
      DO I = 1, NTENS
        DEV_MAX(I) = STATEV(I+6)
        DEV_MIN(I) = STATEV(I+12)
      ENDDO
	  
	  IF (NPT.EQ.1) THEN
	    WRITE(6,*) 'OUTJUMP', NOEL, NPT, KITER(NOEL), DDOTMAX, DNMIN
	  ENDIF
	  
	  IF (CJUMP(NOEL).EQ.1) THEN
		IF (NPT.EQ.1) THEN
		  KITER(NOEL) = KITER(NOEL)+1
		  WRITE(6,*) 'INJUMP', NOEL, KITER(NOEL), DDOTMAX, DNMIN
		  ! IF (NOEL.EQ.1) THEN
	    	! WRITE(6,*) 'JUMP1', NOEL, KITER(NOEL), DDOTMAX, DNMIN
		  ! ENDIF
		ENDIF
		DDMG = DDOTARR(NOEL,NPT)*DNMIN
		IF ((DMG+DDMG).LE.1) THEN
		  DMG = DMG+DDMG
		  NCYC = NCYC+DNMIN
		ENDIF
      ENDIF

      DO I = 1,NTENS
	    DO J = 1,NTENS
	      DDSDDE(I,J) = 0
	    ENDDO
      ENDDO
	  
	  EDMG = E*(1-DMG)
      DDSDDE(1,1) = EDMG/(1+NU)/(1-2*NU)*(1-NU)
      DDSDDE(2,2) = EDMG/(1+NU)/(1-2*NU)*(1-NU)
      DDSDDE(3,3) = EDMG/(1+NU)/(1-2*NU)*(1-NU)
      DDSDDE(4,4) = EDMG/(1+NU)/(1-2*NU)*(1-2*NU)/2
      DDSDDE(5,5) = EDMG/(1+NU)/(1-2*NU)*(1-2*NU)/2
      DDSDDE(6,6) = EDMG/(1+NU)/(1-2*NU)*(1-2*NU)/2
      DDSDDE(1,2) = EDMG/(1+NU)/(1-2*NU)*NU
      DDSDDE(1,3) = EDMG/(1+NU)/(1-2*NU)*NU
      DDSDDE(2,3) = EDMG/(1+NU)/(1-2*NU)*NU
      DDSDDE(2,1) = EDMG/(1+NU)/(1-2*NU)*NU
      DDSDDE(3,1) = EDMG/(1+NU)/(1-2*NU)*NU
      DDSDDE(3,2) = EDMG/(1+NU)/(1-2*NU)*NU

      DO I = 1,NTENS
	   DO J = 1,NTENS
	      STRESS(I) = STRESS(I)+DDSDDE(I,J)*DSTRAN(J)
	   ENDDO
      ENDDO

      I1 = STRESS(1)+STRESS(2)+STRESS(3)
      I2 = STRESS(1)*STRESS(2)+STRESS(2)*STRESS(3)+STRESS(3)*STRESS(1)
     1 -STRESS(4)**2-STRESS(5)**2-STRESS(6)**2
      J2 = I2-I1**2/3
	  
	  SEQ = (-3*J2)**0.5
      IF (SEQ.GT.SEQ_MAX) THEN
		SEQ_MAX = SEQ
      ENDIF

      SH = I1/3
      IF(SH.GT.SH_MAX) THEN
        SH_MAX = SH
      ELSE IF (SH.LT.SH_MIN) THEN
        SH_MIN = SH
      END IF
      
      DO I = 1,NTENS
		IF(I.LE.3) THEN
		  DEV(I) = STRESS(I)-SH
		ELSE
		  DEV(I) = STRESS(I)
		ENDIF
		IF (DEV(I).GT.DEV_MAX(I)) THEN
		  DEV_MAX(I) = DEV(I)
		ELSE IF (DEV(I).LT.DEV_MIN(I)) THEN
		  DEV_MIN(I) = DEV(I)
		ENDIF
      ENDDO
	  
	  IF ((TIME(1)+DTIME-PCYC(NOEL)).EQ.1) THEN
		SH_MEAN = (SH_MAX+SH_MIN)/2
		DEV_AMP = 0
		DO I = 1,NTENS
		  DEV_AMP = DEV_AMP+(DEV_MAX(I)-DEV_MIN(I))**2
		ENDDO
		AII = (3/2*DEV_AMP)**0.5/2
		AII_STAR = SL0*(1-3*B1*SH_MEAN)
		ALPHA = 1-A*MACAULAY((AII-AII_STAR)/(SU-SEQ_MAX))
		DDOT = (1-(1-DMG)**(1+BETA))**ALPHA*
     1  (AII/(M0*(1-3*B2*SH_MEAN)*(1-DMG)))**BETA
        ! IF (NCYC .EQ. 0) THEN
		  ! NF = MACAULAY((SU-SEQ_MAX)/(AII-AII_STAR))/
		! 1    (1+BETA)/A*(M0*(1-3*B2*SH_MEAN)/AII)**BETA
        ! ENDIF
		DDOTARR(NOEL,NPT) = DDOT
		IF (NPT.EQ.1) THEN
		  WRITE(6,*) 'ASSGN', NOEL, NPT, DDOT, DDOTARR(NOEL,NPT)
		  ! IF (NOEL.EQ.1) THEN
			! WRITE(6,*) 'ASSGN1', NOEL, NPT, DDOT, DDOTARR(NOEL,NPT)
		  ! ENDIF
		ENDIF
	  ENDIF
	  
	  STATEV(1) = DMG
	  STATEV(2) = EDMG
	  STATEV(3) = NCYC
	  STATEV(4) = SEQ_MAX
      STATEV(5) = SH_MAX
      STATEV(6) = SH_MIN
      DO I = 1,NTENS
		STATEV(I+6) = DEV_MAX(I)
		STATEV(I+12) = DEV_MIN(I)
      ENDDO

      RETURN
      END


	  SUBROUTINE SDVINI(STATEV,COORDS,NSTATV,NCRDS,NOEL,NPT,LAYER,KSPT)
	  USE STATEMODULE
      INCLUDE 'ABA_PARAM.INC'
      DIMENSION STATEV(NSTATV), COORDS(NCRDS)
      STATEV(1) = DMGINIT
      RETURN
      END


      REAL FUNCTION MACAULAY(ARG)
      REAL ARG
      MACAULAY = (ARG+ABS(ARG))/2
      RETURN
      END
	  
	  
