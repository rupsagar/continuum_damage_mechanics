!DIR$ FREEFORM

! MODULE FOR SHARED PARAMETERS
MODULE SHARED_DATA
	IMPLICIT NONE
	! INTEGER DNMIN
	! INTEGER, ALLOCATABLE :: KITER(:)
	! DOUBLE PRECISION DMGINIT,DDMGINC
	DOUBLE PRECISION, ALLOCATABLE :: DDOTARR(:,:)
	DOUBLE PRECISION DDOTMAX,MATPARAM(5),NU,ALPHA,BETA,C,KAPPA
	INTEGER NUMEL,NINTP,NCYC_REAL,NCYC_LIFE,NCYC_JUMP,INCR_FLAG
	SAVE
END

! SUBROUTINE UEXTERNALDB
SUBROUTINE UEXTERNALDB(LOP,LRESTART,TIME,DTIME,KSTEP,KINC)
	USE SHARED_DATA
	INCLUDE 'ABA_PARAM.INC'
	DIMENSION TIME(2)
	
	INTEGER IOS,I
	
	! INITIALIZE MUTEX FOR PARALLELIZATION
	! CALL MUTEXINIT(10)
	
	IF (LOP.EQ.0) THEN		! START OF ANALYSIS
		! INITIALIZE VARIABLES
		NUMEL = 136
		NINTP = 27
		ALLOCATE(DDOTARR(NUMEL,NINTP))
		NCYC_JUMP=10
		! READ DAMAGE MODEL PARAMETERS FOR THE MATERIAL
		IOS=-1
		OPEN(10,FILE='/Structure_HPC5/Rupsagar/06_Continuum_Damage_Mechanics/02_WIP/02_Peerlings/v2/Peerlings_Material_Parameters.txt',STATUS='UNKNOWN',IOSTAT=IOS)
		IF (IOS.EQ.0) THEN
			DO I=1,5
				READ(10,*) MATPARAM(I)
				WRITE(6,*) 'FILE OPENED ',IOS,MATPARAM(I)
			ENDDO
			NU=MATPARAM(1)
			ALPHA=MATPARAM(2)
			BETA=MATPARAM(3)
			C=MATPARAM(4)
			KAPPA=MATPARAM(5)
		ELSE
			WRITE(6,*) 'FILE CANNOT BE OPENED; IOSTAT=',IOS
		ENDIF
	ELSEIF (LOP.EQ.2) THEN		! END OF CURRENT ANALYSIS INCREMENT
		CALL CHECK_JUMP(TIME(1),TIME(2),DTIME)
	ENDIF

	RETURN
END

! SUBROUTINE USDFLD
SUBROUTINE USDFLD(FIELD,STATEV,PNEWDT,DIRECT,T,CELENT,&
	TIME,DTIME,CMNAME,ORNAME,NFIELD,NSTATV,NOEL,NPT,LAYER,&
	KSPT,KSTEP,KINC,NDI,NSHR,COORD,JMAC,JMATYP,MATLAYO,LACCFLA)
	USE SHARED_DATA
	INCLUDE 'ABA_PARAM.INC'
	
	CHARACTER*80 CMNAME,ORNAME
	CHARACTER*3  FLGRAY(15)
	DIMENSION FIELD(NFIELD),STATEV(NSTATV),DIRECT(3,3),T(3,3),TIME(2)
	DIMENSION ARRAY(15),JARRAY(15),JMAC(*),JMATYP(*),COORD(*)
	
	! HEADER FILES FOR MUTEX
	! INCLUDE 'SMAAspUserArrays.hdr'
	! INCLUDE 'SMAAspUserSubroutines.hdr'
    ! INCLUDE 'SMAAspUserUtilities.hdr'
	
	! USER DEFINED VARIABLES
	DOUBLE PRECISION E11,E22,E33,E12,E13,E23,I1,J2,DMG_PREV,DMG_CUR

	! RECALL SDV
	DMG_PREV=STATEV(1)	

	! STRAIN TENSOR
	CALL GETVRM('E',ARRAY,JARRAY,FLGRAY,JRCD,JMAC,JMATYP,MATLAYO,LACCFLA)
	IF(JRCD.EQ.0) THEN
	  E11=ARRAY(1)
	  E22=ARRAY(2)
	  E33=ARRAY(3)
	  E12=ARRAY(4)
	  E13=ARRAY(5)
	  E23=ARRAY(6)
	ENDIF

	! PRINCIPAL STRAINS
	! CALL GETVRM('EP',ARRAY,JARRAY,FLGRAY,JRCD,JMAC,JMATYP,
	! 1 MATLAYO,LACCFLA)
	! IF(JRCD .EQ. 0) THEN
	  ! E11=ARRAY(1)
	  ! E22=ARRAY(2)
	  ! E33=ARRAY(3)
	  ! E12=0
	  ! E13=0
	  ! E23=0
	! END IF

	I1=E11+E22+E33
	J2=I1**2/6.0-0.5*(E11**2+E22**2+E33**2+2*(E12**2+E13**2+E23**2))
	EPS_EQ=1/(1+NU)*(-3*J2)**0.5
	
	! THREAD SAFETY
	! CALL MUTEXLOCK(10)
	! CALL MUTEXUNLOCK(10)
	
	IF ((NOEL.EQ.1).AND.(NPT.EQ.1)) THEN
		DDOTARR(NOEL,NPT)=1D-6
	ELSEIF ((NOEL.EQ.2).AND.(NPT.EQ.2)) THEN
		DDOTARR(NOEL,NPT)=2D-6
	ENDIF

	! UPDATE DAMAGE
	IF (INCR_FLAG.EQ.1) THEN
		DMG_CUR=DMG_PREV+DDOTARR(NOEL,NPT)*NCYC_JUMP
		IF (DMG_CUR.GE.1) THEN
			DMG_CUR=DMG_PREV
		ENDIF
		IF ((NOEL.EQ.2).AND.(NPT.EQ.2)) THEN
			WRITE(6,'(A,I8,A,I8,A,F8.6,F8.6)') 'ELEMENT NO. ',NOEL,' INT POINT ',NPT,' DDOT VALUE ',DDOTARR(NOEL,NPT),' DMG CUR ',DMG_CUR
		ENDIF
	ELSEIF (INCR_FLAG.EQ.0) THEN
		DMG_CUR=DMG_PREV
	ENDIF

	! UPDATE SDV
	STATEV(1)=DMG_CUR
	STATEV(2)=NCYC_LIFE
	STATEV(3)=NCYC_REAL

	RETURN
END

! SUBROUTINE FOR CYCLE JUMP
SUBROUTINE CHECK_JUMP(TIME1,TIME2,DTIME)
	USE SHARED_DATA
	DOUBLE PRECISION, INTENT(IN) :: TIME1,TIME2,DTIME
	INTEGER I,J
	
	WRITE(6,'(A,3(F8.4),3(I8))') 'IN CYCLE JUMP1 ',TIME1,TIME2,DTIME,NCYC_REAL,NCYC_LIFE,INCR_FLAG
	IF ((TIME1+DTIME-NCYC_REAL).EQ.1) THEN
		INCR_FLAG=1
		NCYC_REAL=NCYC_REAL+1
		NCYC_LIFE=NCYC_LIFE+NCYC_JUMP
	ELSE
		INCR_FLAG=0
	ENDIF
	WRITE(6,'(A,3(F8.4),3(I8))') 'IN CYCLE JUMP2 ',TIME1,TIME2,DTIME,NCYC_REAL,NCYC_LIFE,INCR_FLAG
	
	DO I=1,NUMEL
		DO J=1,NINTP
			IF ((DDOTARR(I,J).EQ.1D-6).OR.(DDOTARR(I,J).EQ.2D-6)) THEN
				WRITE(6,'(A,I8,A,I8,A,F8.6)') 'ELEMENT NO. ',I,' INT POINT ',J,' DDOT VALUE ',DDOTARR(I,J)
			ENDIF
		ENDDO
	ENDDO
	
	RETURN
END
